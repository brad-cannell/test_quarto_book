# WebR {sec-webr}

```{r}
#| label: setup-webr
library(dplyr, warn.conflicts = FALSE)
```

## Links

- [GitHub Issue](https://github.com/orgs/brad-cannell/projects/3/views/4?pane=issue&itemId=34978068)
- [A brief introduction to using WebR and Quarto for client-side interactive lesson material](https://jabberwocky.weecology.org/2023/03/13/a-brief-introduction-to-using-webr-and-quarto-for-client-side-interactive-lesson-material/)
- [webR Extension for Quarto](https://github.com/coatless/quarto-webr)

## Testing

Following the guidance on the README of [webR Extension for Quarto](https://github.com/coatless/quarto-webr).

To use this extension in a Quarto project, install it from within the project's working directory by typing into Terminal:

````markdown
quarto add coatless/quarto-webr
````

For each document, place the webr filter in the document's header (I actually placed it in `_quarto.yml`:

````markdown
filters:
  - webr
````

Then, place the R code for webR in a code block marked with `{webr-r}`. For example.

````markdown
```{{webr-r}}
fit = lm(mpg ~ am, data = mtcars)

summary(fit)
```
````

```{webr-r}
fit = lm(mpg ~ am, data = mtcars)

summary(fit)
```

Note: If you don't specify the `engine: knitr`, the default compute engine used will be jupyter. This could trigger prompts to install Python. However, if you specify `engine: knitr`, there's no need to install Python.

There are many more customization options that are available. Please see the [customization documentation](https://quarto-webr.thecoatlessprofessor.com/qwebr-meta-options.html) for more examples.

For specific deployment usage cases, please see [Templates](https://quarto-webr.thecoatlessprofessor.com/qwebr-deployment-templates.html).

