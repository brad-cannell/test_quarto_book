{
  "hash": "9a6f460d4c80fe44478e348bbbdeb776",
  "result": {
    "markdown": "# Images {#sec-images}\n\nHere are some examples of adding figures.\n\nLinks\n\n- [The Quarto documentation about images](https://quarto.org/docs/authoring/figures.html)\n- [Example image in R4DS](https://github.com/hadley/r4ds/blob/main/intro.qmd)\n\n## Native Quarto figures\n\nWe can use the `![Caption text](file_path.png){#fig-label}` syntax to add images. For example:\n\n````markdown\n![Relative Path Directions](directions_relative.png){#fig-directions}\n````\n\nRenders as:\n\n![Relative Path Directions](directions_relative.png){#fig-directions}\n\nAnd I can [cross reference](https://quarto.org/docs/authoring/cross-references.html) the figure by typing `@fig-directions`. See @fig-directions\n\n::: {.callout-important}\nFor cross-references to work, the image must have a caption _and_ a label.\n:::\n\n## Adding figures with Knitr\n\nIn R4DS (link above), Hadley et al. are still using `knitr::include_graphics(\"path\")` to insert images even though the book has been converted to Quarto documents. When using Bookdown, [Yihui gives four arguments](https://bookdown.org/yihui/bookdown/figures.html) for using `knitr::include_graphics(\"path\")` instead of native markdown image formatting. So, we will likely continue to use them too. Here is an example image code chunk from [R4DS](https://github.com/hadley/r4ds/blob/main/intro.qmd):\n\n````\n```{{r}}\n#| label: fig-ds-diagram\n#| echo: false\n#| fig-cap: |\n#|   In our model of the data science process, you start with data import\n#|   and tidying. Next, you understand your data with an iterative cycle of\n#|   transforming, visualizing, and modeling. You finish the process \n#|   by communicating your results to other humans.\n#| fig-alt: |\n#|   A diagram displaying the data science cycle: Import -> Tidy -> Understand \n#|   (which has the phases Transform -> Visualize -> Model in a cycle) -> \n#|   Communicate. Surrounding all of these is Communicate.\n#| out.width: NULL\n\nknitr::include_graphics(\"diagrams/data-science/base.png\", dpi = 270)\n```\n````\n\nHere, I'm adding my own image with `knitr::include_graphics(\"path\")`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Relative Path Directions.\n](directions_relative.png){#fig-directions fig-alt='An image of a store with directions' width=900}\n:::\n:::\n\n\nAnd I can [cross reference](https://quarto.org/docs/authoring/cross-references.html) the figure by typing `@fig-directions`. See @fig-directions\n\n::: {.callout-important}\nFor cross-references to work, the image must have a caption _and_ a label.\n:::\n\n::: {.callout-warning}\n## Creating figures without captions\n\nFigure captions will look like `Figure X: ?(caption)` if the chunk label is prefixed with `fig` (e.g., `#| label: fig-directions`), but there isn't a valid `#| fig-cap:`. There are more details given [here](https://github.com/quarto-dev/quarto-cli/issues/3878). There are two ways to resolve this issue:\n\n1. Remove the `fig-` part of the label.\n2. Add a valid figure caption.\n:::\n\n## Images\n\nSometimes I want to add image borders to make the image stand out a little bit from the background around them. For example, it's kind of hard to distinguish @fig-default-citation from the text/background around it.\n\nAfter a quick Google search, there appears to be a [LaTeX package](https://quarto.org/docs/authoring/figures.html#environments) that will add a boarder, but I'm assuming that will only work for PDF renderings.\n\nAdditionally, I imagine that I can probably make some adjustments to the .scss file that will add boarders to images. However, that should only work for HTML renderings. \n\nTherefore, the most straightforward and robust option might just be to add the boarder directly to the image using PowerPoint, Preview, Photoshop, etc. That's what I did for @fig-ama-citation.\n",
    "supporting": [
      "images_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}