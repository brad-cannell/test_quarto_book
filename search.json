[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Test Quarto Book",
    "section": "",
    "text": "Preface\nThis is my first Quarto book. For now, I’m just using it for some experimentation. Eventually, I will probably want to add all of this to a GitHub repository. Right now, Olivia is in class and I’m content with just experimenting a little bit.\nThis is not my new R Notes book; although, I may move R Notes over to Quarto at some point. This is purely just a sandbox for playing with Quarto books."
  },
  {
    "objectID": "index.html#useful-websites",
    "href": "index.html#useful-websites",
    "title": "Test Quarto Book",
    "section": "Useful websites:",
    "text": "Useful websites:\n\nQuarto book documentation"
  },
  {
    "objectID": "index.html#rendering",
    "href": "index.html#rendering",
    "title": "Test Quarto Book",
    "section": "Rendering",
    "text": "Rendering\nYou can render the files by clicking the Render button in RStudio. To render the HTML and PDF files at the same time, type quarto render into the terminal. You can also render Quarto files with a native R code chunk.\n\nThe input argument: The input file or project directory to be rendered (defaults to rendering the project in the current working directory).\nThe output_format argument: Target output format (defaults to “html”). The option “all” will render all formats defined within the file or project.\n\n```{r}\n#| Render with R\n#| eval: false\nquarto::quarto_render(output_format = \"all\")\n```"
  },
  {
    "objectID": "index.html#publishing-to-github-pages",
    "href": "index.html#publishing-to-github-pages",
    "title": "Test Quarto Book",
    "section": "Publishing to GitHub pages",
    "text": "Publishing to GitHub pages\nThis article is great. After committing, and making sure you are on the main branch, type quarto publish gh-pages in the terminal."
  },
  {
    "objectID": "chapters/part_book_options.html",
    "href": "chapters/part_book_options.html",
    "title": "Book Options",
    "section": "",
    "text": "This part of the book contains qmd files pertaining to book options. I’m mostly creating this file to demonstrate how the (optional) book part qmd files work."
  },
  {
    "objectID": "chapters/book_options.html",
    "href": "chapters/book_options.html",
    "title": "1  Book Options",
    "section": "",
    "text": "A collection of notes on Quarto book options.\n\nLink to list of book options\nHow do you add a cover image? Look at r4ds.\n\ncover-image: cover.jpg\n\nHow do you add last date rendered to the _quarto.yml file? “r Sys.Date()” doesn’t seem to work.\n\nUse the keyword today\n\nCan I add links to GitHub and/or social media?\n\nStill need an answer here.\n\nCan I add links to the GitHub repo containing the books files?\n\nYes. See https://quarto.org/docs/books/book-output.html#sidebar-tools\n\nHow do I add a favicon?\n\nfavicon: cover.jpg\n\nHow do I add Google analytics?\n\nStill need an answer here.\n\nCan I add a Google analytics badge to my GitHub README?\n\nStill need an answer here.\n\nHow do I preview the book in my web browser instead of RStudio’s Viewer pane?\n\nJust click the little gear icon next to the Render button in RStudio. Select Preview in Window."
  },
  {
    "objectID": "chapters/other.html#pros-and-cons",
    "href": "chapters/other.html#pros-and-cons",
    "title": "2  Other little things",
    "section": "2.1 Pros and cons",
    "text": "2.1 Pros and cons\nSome of the things I like about working with Quarto (as opposed to bookdown) so far\n\nA preview of the book renders automatically.\nI can easily render only one chapter by opening that chapter’s qmd file and clicking the Render button."
  },
  {
    "objectID": "chapters/call_out_boxes.html",
    "href": "chapters/call_out_boxes.html",
    "title": "3  Adding call out boxes",
    "section": "",
    "text": "In R4Epi, we sometimes add special boxes for side notes and warnings. How do we add those into qmd books?\nWhat do those boxes look like when we render the book to pdf format?\nDoes Quarto have some built-in boxes? It looks like it might?\n\nHow do you add the call out boxes (i.e., important, etc.)?\n\nSee Quarto documentation on callout blocks\n\n\n::: callout-note\nNote that there are five types of callouts, including: `note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n\n\n\n\n\nNote\n\n\n\nNote that there are five types of callouts, including: note, tip, warning, caution, and important.\n\n\n::: callout-warning\nCallouts provide a simple way to attract attention, for example, to this warning.\n:::\n\n\n\n\n\n\nWarning\n\n\n\nCallouts provide a simple way to attract attention, for example, to this warning.\n\n\n::: callout-important\n## This is Important\n\nDanger, callouts will really improve your writing.\n:::\n\n\n\n\n\n\nThis is Important\n\n\n\nDanger, callouts will really improve your writing.\n\n\n::: callout-tip\n## Tip With Title\n\nThis is an example of a callout with a title.\n:::\n\n\n\n\n\n\nTip With Title\n\n\n\nThis is an example of a callout with a title.\n\n\n::: {.callout-caution collapse=\"true\"}\n## Expand To Learn About Collapse\n\nThis is an example of a 'collapsed' caution callout that can be expanded by the user. You can use `collapse=\"true\"` to collapse it by default or `collapse=\"false\"` to make a collapsible callout that is expanded by default.\n:::\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘collapsed’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "chapters/cross_references/cross_references.html#book-parts",
    "href": "chapters/cross_references/cross_references.html#book-parts",
    "title": "4  Cross References",
    "section": "4.1 Book parts",
    "text": "4.1 Book parts\nLink to the official documentation. Briefly, there are two methods that I’m likely to use.\n\n4.1.1 Reference a chapter\nFirst, you need to make a chapter/section heading available to be referenced by adding {#sec-} behind the header. For example:\n# Images {#sec-images}\nThen to reference it you type @sec-. For example:\nSee @sec-images to learn about images.\nWhich looks like this: See Chapter 7 to learn about images.\n\n\n\n\n\n\nLabel Prefix\n\n\n\nIn order for a chapter to be cross-referenceable, its label must start with the sec- prefix.\n\n\nIf I don’t want @sec-images to automatically be replaced with Chapter 7 – for example, I want it to say the images chapter instead – then I think I will need to use hyperlinks ( below). For example,\nSee [the images chapter](../images/images.qmd)\nWhich looks like this: See the images chapter\n\n\n\n\n\n\nHyperlink file paths\n\n\n\nWhen using hyperlinks to connect chatpers/sections, make sure to use the full file path (originating from the current qmd file). For example, use ../images/images.qmd instead of just images.qmd. If you change the file structure, you may break the links. This is one reason why you may want to use that @sec- syntax whenever possible.\n\n\nChapter sections work the same way. You are able to cross-reference any heading at any level. For example,"
  },
  {
    "objectID": "chapters/cross_references/cross_references.html#citations",
    "href": "chapters/cross_references/cross_references.html#citations",
    "title": "4  Cross References",
    "section": "4.2 Citations",
    "text": "4.2 Citations\nBuilt-in example: See1 for additional discussion of literate programming.\nTo change the citation style\n\nAdd a CSL file to the repo. For example, this repo has a file named ama.csl. The Quarto Citations and Footnotes documentation also includes links to download CSL files for a variety of citation formats.\nUpdate the csl: option in _quarto.yml. For example, csl: ama.csl.\n\nHere is what the default @knuth84 citation above looks like after rendering this document.\n\n\n\n\n\nFigure 4.1: An example of Quarto’s default citation style.\n\n\n\n\nHere is what the default @knuth84 reference looks like after rendering this document.\n\n\n\n\n\nAn example of Quarto’s default reference style.\n\n\n\n\nHere is what the @knuth84 citation above looks like after changing the citation style to AMA and rendering this document.\n\n\n\n\n\nFigure 4.2: An example of an AMA citation.\n\n\n\n\nHere is what the @knuth84 reference looks like after changing the citation style to AMA and rendering this document.\n\n\n\n\n\nFigure 4.3: An example of an AMA reference."
  },
  {
    "objectID": "chapters/cross_references/cross_references.html#footnotes",
    "href": "chapters/cross_references/cross_references.html#footnotes",
    "title": "4  Cross References",
    "section": "",
    "text": "And here is an example footnote.↩︎"
  },
  {
    "objectID": "chapters/cross_references/cross_references.html#glossary",
    "href": "chapters/cross_references/cross_references.html#glossary",
    "title": "4  Cross References",
    "section": "4.4 Glossary",
    "text": "4.4 Glossary\nFollowing the emphasizing text guidance in the R4Epi Wiki, we sometimes want to hyperlink words that we will define in the Glossary. We can definitely link selected words in the narrative of the chapters to headings, but that approach creates a line in the table of contents for each word in the glossary, which isn’t ideal. I posted this issue on Stack Overflow. Therefore, the best strategy so far seems to be using definition lists.\nFor example, let’s say that we want to define the term data frame in the glossary. The first thing we do is assign and CSS ID to the word “data frame” in the glossary qmd file. For now, I’m planning to prefix all glossary IDs with the word “glossary” in case I need to search for them later.\n[Data frame]{#glossary-data-frame} \n\n:  For our purposes, data frames are just R's term for data set or data table. Data frames are made up of columns (variables) and rows (observations). In R, all columns of a data frame must have the same length.\n\n\n\n\n\n\nDefinition lists\n\n\n\nThe colon followed by two spaces before the term’s definition is not optional.\n\n\nNext, use a hyperlink to reference the glossary term in the narrative of the chapter. For example,\nWe want to define the term [data frame](../appendices/glossary.qmd#glossary-data-frame) in the glossary.\nWhich looks like this: We want to define the term data frame in the glossary.\nAdditionally, terms linked in this way should also work in PDF downloads.\nIf we want to adjust the style of the of the glossary term (e.g., increase the font size or make it bold), we can do so in the .scss file. For example,\ndl {\n  font-size: 14pt;\n  font-weight: bold;\n}\nWe use dl because Pandoc renders the HTML output to description list (&lt;dl&gt;) elements. This styling should also work in PDF downloads.\n\n\n\n\n1. Knuth DE. Literate programming. Comput J. 1984;27(2):97-111. doi:10.1093/comjnl/27.2.97"
  },
  {
    "objectID": "chapters/custom_styling.html",
    "href": "chapters/custom_styling.html",
    "title": "5  Custom Styling",
    "section": "",
    "text": "Useful websites:\n\nQuarto documentation on HTML theming\nCustomizing Quarto Websites\n\nIn the Bookdown version of R4Epi, I had a custom CSS stylesheet (i.e., style.css) that I used create some custom call-out boxes and a few other things. Here is the contents of that stylesheet.\n```{css}\n\n/******************************************************************************\nCSS for the R4Epi textbook\n******************************************************************************/\n\n/*\nCSS that came with bookdown\n*/\np.caption {\n  color: #777;\n  margin-top: 10px;\n}\np code {\n  white-space: inherit;\n}\npre {\n  word-break: normal;\n  word-wrap: normal;\n}\npre code {\n  white-space: inherit;\n}\n\n/* \nFont Styles\n*/\n.large-bold {\n  font-size: 2em;\n  font-weight: bold;\n}\n\n.underline {\n  text-decoration: underline;\n}\n\n.red-text {\n  color: red;\n}\n\n.code {\n  color: #0365C0;\n  font-family: \"Courier New\", Courier, monospace;\n}\n\n\n/*\nNote styles\n*/\n.note {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  background-color: #f0f7fb;\n  border: solid 1px #3498db;\n  border-radius: 6px;\n  line-height: 18px;\n  overflow: hidden;\n  padding: 15px 15px;\n}\n\n.warning {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  background-color: #FEFBEA;\n  border: solid 1px #F2E394;\n  border-radius: 6px;\n  line-height: 18px;\n  overflow: hidden;\n  padding: 15px 15px;\n}\n\n\n/* \nText box with construction stripes for chapters under construction.\nHelpful websites: \nhttps://css-tricks.com/stripes-css/\nhttps://stackoverflow.com/questions/10422949/css-background-opacity\n*/\n.under-construction {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  /*background-color: rgba(248, 116, 49, 0.4);*/ /* Fourth number is opacity */\n  background: repeating-linear-gradient(\n    45deg,\n    rgba(248, 116, 49, 0.1) /* Fourth number is opacity */,\n    rgba(248, 116, 49, 0.1) 10px,\n    rgba(169, 169, 169, 0.15) 10px,\n    rgba(169, 169, 169, 0.15) 20px\n  );\n  border: solid 1px #F87431;\n  border-radius: 6px;\n  line-height: 26px;\n  overflow: hidden;\n  padding: 15px 15px;\n  font-size: 24px;\n}\n\n\n/*\nDisable the title header from the index page.\nhttps://stackoverflow.com/questions/53399095/disable-title-author-in-the-html-output-of-bookdown\n*/\n#header {\n    display: none;\n}\n\n```\nFollowing the guidance on Customizing Quarto Websites, I’m going use that stylesheet for this book too.\n```{scss}\n\n/******************************************************************************\nCustom CSS styling for the Test Quarto Book\n******************************************************************************/\n\n/*-- scss:defaults --*/\n\n// Fonts\n// Importing a font from Google Fonts (https://ucsb-meds.github.io/customizing-quarto-websites/#/select-fonts)\n// @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap'); // For testing\n$codeFont:  \"Courier New\", Courier, monospace;\n\n// Colors\n// $purple: #AE8BD1; // For testing\n$codeBackground: #0365C0;\n$noteBackground: #f0f7fb;\n$noteBorder: #3498db;\n$warningBackground: #FEFBEA;\n$warningBorder: #F2E394;\n\n// Adjustments to default Quarto styles\n// $body-bg: $purple; // page background -- for testing\n\n\n/*-- My Font Styles --*/\n.large-bold {\n  font-size: 2em;\n  font-weight: bold;\n}\n\n.underline {\n  text-decoration: underline;\n}\n\n.red-text {\n  color: red;\n}\n\n.code {\n  color: $codeBackground;\n  font-family: $codeFont;\n}\n\n\n/*-- Note Styles --*/\n.note {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  background-color: $noteBackground;\n  border: solid 1px $noteBorder;\n  border-radius: 6px;\n  line-height: 18px;\n  overflow: hidden;\n  padding: 15px 15px;\n}\n\n.warning {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  background-color: $warningBackground;\n  border: solid 1px $warningBorder;\n  border-radius: 6px;\n  line-height: 18px;\n  overflow: hidden;\n  padding: 15px 15px;\n}\n\n\n/* \nText box with construction stripes for chapters under construction.\nHelpful websites: \nhttps://css-tricks.com/stripes-css/\nhttps://stackoverflow.com/questions/10422949/css-background-opacity\n\nI could create SASS variables for these elements, but I don't want to take the time to do that now.\n*/\n.under-construction {\n  -moz-border-radius: 6px;\n  -webkit-border-radius: 6px;\n  /*background-color: rgba(248, 116, 49, 0.4);*/ /* Fourth number is opacity */\n  background: repeating-linear-gradient(\n    45deg,\n    rgba(248, 116, 49, 0.1) /* Fourth number is opacity */,\n    rgba(248, 116, 49, 0.1) 10px,\n    rgba(169, 169, 169, 0.15) 10px,\n    rgba(169, 169, 169, 0.15) 20px\n  );\n  border: solid 1px #F87431;\n  border-radius: 6px;\n  line-height: 26px;\n  overflow: hidden;\n  padding: 15px 15px;\n  font-size: 24px;\n}\n\n\n/*\nDisable the title header from the index page.\nhttps://stackoverflow.com/questions/53399095/disable-title-author-in-the-html-output-of-bookdown\n*/\n#header {\n    display: none;\n}\n\n```\nFor testing, I’m going to add a note, a warning, and a construction box.\n\n🗒Side Note: Here is a note.\n\n&lt;p class=\"note\"&gt; 🗒**Side Note:** Here is a note. &lt;/p&gt;\n\n⚠️Warning: Here is a warning.\n\n&lt;p class=\"warning\"&gt; ⚠️**Warning:** Here is a warning. &lt;/p&gt;\n\nr fontawesome::fa(\"hammer\", fill = \"#000000\", height=\"1em\") Here is the under construction box.\n\n&lt;p class=\"under-construction\"&gt; `r fontawesome::fa(\"hammer\", fill = \"#000000\", height=\"1em\")` Here is the under construction box.&lt;/p&gt;\nNote that Font Awesome is not currently working and none of these call out boxes work in PDF format. Quarto’s built-in call out boxes do work in PDF format, though."
  },
  {
    "objectID": "chapters/gifs/gifs.html",
    "href": "chapters/gifs/gifs.html",
    "title": "6  Gifs",
    "section": "",
    "text": "In R4Epi, we use quite a few gifs. That makes rendering the book to pdf format challenging. What happens when we add a gif to a qmd document and render it to pdf?\nThe following code works great for HTML format, but it messes up pdf format.\n![A gif about file paths](img/file_path_gif.gif){#fig-file-paths}\n\nAnd I can [cross reference](https://quarto.org/docs/authoring/cross-references.html) the gif by typing `@fig-file-paths`. See @fig-file-paths\n\n::: {.callout-important}\nFor cross-references to work, the image must have a caption _and_ a label.\n:::\nWhat if I use knitr::include_graphics(\"path\")?\n\n```{r}\n#| label: fig-file-paths\n#| echo: false\n#| fig-cap: |\n#|   A gif about file paths.\n#| fig-alt: |\n#|   A gif about file paths.\n\nknitr::include_graphics(\"file_path_gif.gif\")\n```\n\nAnd I can [cross reference](https://quarto.org/docs/authoring/cross-references.html) the figure by typing `@fig-file-paths`. See @fig-file-paths\n\n::: {.callout-important}\nFor cross-references to work, the image must have a caption _and_ a label.\n:::\nNo, this doesn’t work either. Here is a pretty good discussion on the topic. It looks like the easiest route may be to use conditional content. Given the limited number of gifs in R4Epi, this shouldn’t be too big of a problem.\nSo, start by conditionally displaying the gif if the output format is html.\n\n::: {.content-visible when-format=\"html\"}\n\n```{r}\n#| label: fig-file-paths\n#| echo: false\n#| fig-cap: |\n#|   A gif about file paths.\n#| fig-alt: |\n#|   A gif about file paths.\n\nknitr::include_graphics(\"file_path_gif.gif\")\n```\n\n:::\nWhich renders as…\n\n\n\n\n\nFigure 6.1: A gif about file paths.\n\n\n\n\nThen, conditionally add a thumbnail image of the gif when the output format is pdf.\n\nCreate a duplicate of the gif in Finder.\nAdd “_thumb” to the end of the file name (before the file extension).\nOpen the duplicate file in preview.\nUse Preview’s sidebar to keep only one of the thumbnail images from the gif (select and delete the rest).\nClick File &gt; Export and export to png.\nDelete the duplicate gif.\n\n\n::: {.content-visible when-format=\"pdf\"}\n\n```{r}\n#| label: fig-file-paths\n#| echo: false\n#| fig-cap: |\n#|   A thumbnail of gif about file paths.\n#| fig-alt: |\n#|   A thumbnail gif about file paths.\n\nknitr::include_graphics(\"file_path_gif.gif\")\n```\n\n:::\nWhich renders as…"
  },
  {
    "objectID": "chapters/images/images.html#native-quarto-figures",
    "href": "chapters/images/images.html#native-quarto-figures",
    "title": "7  Images",
    "section": "7.1 Native Quarto figures",
    "text": "7.1 Native Quarto figures\nHere are some examples of adding figures.\n\n\n\nFigure 7.1: Relative Path Directions\n\n\nAnd I can cross reference the figure by typing @fig-directions. See Figure 7.2\n\n\n\n\n\n\nImportant\n\n\n\nFor cross-references to work, the image must have a caption and a label."
  },
  {
    "objectID": "chapters/images/images.html#adding-figures-with-knitr",
    "href": "chapters/images/images.html#adding-figures-with-knitr",
    "title": "7  Images",
    "section": "7.2 Adding figures with Knitr",
    "text": "7.2 Adding figures with Knitr\nIn R4DS (link above), Hadley et al. are still using knitr::include_graphics(\"path\") to insert images even though the book has been converted to Quarto documents. When using Bookdown, Yihui gives four arguments for using knitr::include_graphics(\"path\") instead of native markdown image formatting. So, we will likely continue to use them too. Here is an example image code chunk from R4DS:\n```{r}\n#| label: fig-ds-diagram\n#| echo: false\n#| fig-cap: |\n#|   In our model of the data science process, you start with data import\n#|   and tidying. Next, you understand your data with an iterative cycle of\n#|   transforming, visualizing, and modeling. You finish the process \n#|   by communicating your results to other humans.\n#| fig-alt: |\n#|   A diagram displaying the data science cycle: Import -&gt; Tidy -&gt; Understand \n#|   (which has the phases Transform -&gt; Visualize -&gt; Model in a cycle) -&gt; \n#|   Communicate. Surrounding all of these is Communicate.\n#| out.width: NULL\n\nknitr::include_graphics(\"diagrams/data-science/base.png\", dpi = 270)\n```\nHere, I’m adding my own image with knitr::include_graphics(\"path\").\n\n\n\n\n\nFigure 7.2: Relative Path Directions.\n\n\n\n\nAnd I can cross reference the figure by typing @fig-directions. See Figure 7.2\n\n\n\n\n\n\nImportant\n\n\n\nFor cross-references to work, the image must have a caption and a label.\n\n\n\n\n\n\n\n\nCreating figures without captions\n\n\n\nFigure captions will look like Figure X: ?(caption) if the chunk label is prefixed with fig (e.g., #| label: fig-directions), but there isn’t a valid #| fig-cap:. There are more details given here. There are two ways to resolve this issue:\n\nRemove the fig- part of the label.\nAdd a valid figure caption."
  },
  {
    "objectID": "chapters/images/images.html#images",
    "href": "chapters/images/images.html#images",
    "title": "7  Images",
    "section": "7.3 Images",
    "text": "7.3 Images\nSometimes I want to add image borders to make the image stand out a little bit from the background around them. For example, it’s kind of hard to distinguish Figure 4.1 from the text/background around it.\nAfter a quick Google search, there appears to be a LaTeX package that will add a boarder, but I’m assuming that will only work for PDF renderings.\nAdditionally, I imagine that I can probably make some adjustments to the .scss file that will add boarders to images. However, that should only work for HTML renderings.\nTherefore, the most straightforward and robust option might just be to add the boarder directly to the image using PowerPoint, Preview, Photoshop, etc. That’s what I did for Figure 4.2."
  },
  {
    "objectID": "chapters/rmd_documents.html#lets-get-programming",
    "href": "chapters/rmd_documents.html#lets-get-programming",
    "title": "8  Rmd Documents",
    "section": "8.1 Let’s Get Programming",
    "text": "8.1 Let’s Get Programming\nIn this chapter, we are going to tie together many of the concepts we’ve learned so far, and you are going to create your first basic R program. Specifically, you are going to write a program that simulates some data and analyzes it."
  },
  {
    "objectID": "chapters/rmd_documents.html#simulating-data",
    "href": "chapters/rmd_documents.html#simulating-data",
    "title": "8  Rmd Documents",
    "section": "8.2 Simulating data",
    "text": "8.2 Simulating data\nData simulation can be really complicated, but it doesn’t have to be. It is simply the process of creating data as opposed to finding data in the wild. This can be really useful in several different ways.\n\nSimulating data is really useful for getting help with a problem you are trying to solve. Often, it isn’t feasible for you to send other people the actual data set you are working on when you encounter a problem you need help with. Sometimes, it may not even be legally allowed (i.e., for privacy reasons). Instead of sending them your entire data set, you can simulate a little data set that recreates the challenge you are trying to address without all the other complexity of the full data set. As a bonus, I have often found that I end up figuring out the solution to the problem I’m trying to solve as I recreate the problem in a simulated data set that I intended to share with others.\nSimulated data can also be useful for learning about and testing statistical assumptions. In epidemiology, we use statistics to draw conclusions about populations of people we are interested in based on samples of people drawn from the population. Because we don’t actually have data from all the people in the population, we have to make some assumptions about the population based on what we find in our sample. When we simulate data, we know the truth about our population because we created our population to have that truth. We can then use this simulated population to play “what if” games with our analysis. What if we only sampled half as many people? What if their heights aren’t actually normally distributed? What if we used a probit model instead of a logit model? Going through this process and answering these questions can help us understand how much, and under what circumstances, we can trust the answers we found in the real world.\n\nSo, let’s go ahead and write a complete R program to simulate and analyze some data. As I said, it doesn’t have to be complicated. In fact, in just a few lines of R code below we simulate and analyze some data about a hypothetical class.\n\nclass &lt;- data.frame(\n  names   = c(\"John\", \"Sally\", \"Brad\", \"Anne\"),\n  heights = c(68, 63, 71, 72)\n)\n\n\nclass\n\n  names heights\n1  John      68\n2 Sally      63\n3  Brad      71\n4  Anne      72\n\n\n\nmean(class$heights)\n\n[1] 68.5\n\n\nAs you can see, this data frame contains the students’ names and heights. We also use the mean() function to calculate the average height of the class. By the end of this chapter, you will understand all the elements of this R code and how to simulate your own data."
  },
  {
    "objectID": "chapters/rmd_documents.html#vectors",
    "href": "chapters/rmd_documents.html#vectors",
    "title": "8  Rmd Documents",
    "section": "8.3 Vectors",
    "text": "8.3 Vectors\nVectors are the most fundamental data structure in R. Here, data structure means “container for our data.” There are other data structures as well; however, they are all built from vectors. That’s why I say vectors are the most fundamental data structure. Some of these other structures include matrices, lists, and data frames. In this book, we won’t use matrices or lists much at all, so you can forget about them for now. Instead, we will almost exclusively use data frames to hold and manipulate our data. However, because data frames are built from vectors, it can be useful to start by learning a little bit about them. Let’s create our first vector now.\n\n# Create an example vector\nnames &lt;- c(\"John\", \"Sally\", \"Brad\", \"Anne\")\n# Print contents to the screen\nnames\n\n[1] \"John\"  \"Sally\" \"Brad\"  \"Anne\" \n\n\n👆Here’s what we did above:\n\nWe created a vector of names with the c() (short for combine) function.\n\nThe vector contains four values: “John”, “Sally”, “Brad”, and “Anne”.\nAll of the values are character strings (i.e., words). We know this because all of the values are wrapped with quotation marks.\nHere we used double quotes above, but we could have also used single quotes. We cannot, however, mix double and single quotes for each character string. For example, c(\"John', ...) won’t work.\n\nWe assigned that vector of character strings to the word names using the &lt;- function.\n\nR now recognizes names as an object that we can do things with.\nR programmers may refer to the names object as “the names object”, “the names vector”, or “the names variable”. For our purposes, these all mean the same thing.\n\nWe printed the contents of the names object to the screen by typing the word “names”.\n\nR returns (shows us) the four character values (“John” “Sally” “Brad” “Anne”) on the computer screen.\n\n\nTry copying and pasting the code above into the RStudio console on your computer. You should notice the names vector appear in your global environment. You may also notice that the global environment pane gives you some additional information about this vector to the right of its name. Specifically, you should see chr [1:4] \"John\"  \"Sally\" \"Brad\"  \"Anne\". This is R telling us that names is a character vector (chr), with four values ([1:4]), and the first four values are \"John\"  \"Sally\" \"Brad\"  \"Anne\".\n\n\n8.3.1 Vector types\nThere are several different vector types, but each vector can have only one type. The type of the vector above was character. We can validate that with the typeof() function like so:\n\ntypeof(names)\n\n[1] \"character\"\n\n\nThe other vector types that we will use in this book are double, integer, and logical. Double vectors hold real numbers and integer vectors hold integers. Collectively, double vectors and integer vectors are known as numeric vectors. Logical vectors can only hold the values TRUE and FALSE. Here are some examples of each:\n\n\n8.3.2 Double vectors\n\n# A numeric vector\nmy_numbers &lt;- c(12.5, 13.98765, pi)\nmy_numbers\n\n[1] 12.500000 13.987650  3.141593\n\n\n\ntypeof(my_numbers)\n\n[1] \"double\"\n\n\n\n\n8.3.3 Integer vectors\nCreating integer vectors involves a weird little quirk of the R language. For some reason, and I have no idea why, we must type an “L” behind the number to make it an integer.\n\n# An integer vector - first attempt\nmy_ints_1 &lt;- c(1, 2, 3)\nmy_ints_1\n\n[1] 1 2 3\n\n\n\ntypeof(my_ints_1)\n\n[1] \"double\"\n\n\n\n# An integer vector - second attempt\n# Must put \"L\" behind the number to make it an integer. No idea why they chose \"L\".\nmy_ints_2 &lt;- c(1L, 2L, 3L)\nmy_ints_2\n\n[1] 1 2 3\n\n\n\ntypeof(my_ints_2)\n\n[1] \"integer\"\n\n\n\n\n8.3.4 Logical vectors\n\n# A logical vector\n# Type TRUE and FALSE in all caps\nmy_logical &lt;- c(TRUE, FALSE, TRUE)\nmy_logical\n\n[1]  TRUE FALSE  TRUE\n\n\n\ntypeof(my_logical)\n\n[1] \"logical\"\n\n\nRather than have an abstract discussion about the particulars of each of these vector types right now, I think it’s best to wait and learn more about them when they naturally arise in the context of a real challenge we are trying to solve with data. At this point, just having some vague idea that they exist is good enough."
  },
  {
    "objectID": "chapters/rmd_documents.html#data-frames",
    "href": "chapters/rmd_documents.html#data-frames",
    "title": "8  Rmd Documents",
    "section": "8.4 Data frames",
    "text": "8.4 Data frames\nVectors are useful for storing a single characteristic where all the data is of the same type. However, in epidemiology, we typically want to store information about many different characteristics of whatever we happen to be studying. For example, we didn’t just want the names of the people in our class, we also wanted the heights. Of course, we can also store the heights in a vector like so:\n\nheights &lt;- c(68, 63, 71, 72)\nheights\n\n[1] 68 63 71 72\n\n\nBut this vector, in and of itself, doesn’t tell us which height goes with which person. When we want to create relationships between our vectors, we can use them to build a data frame. For example:\n\n# Create a vector of names\nnames &lt;- c(\"John\", \"Sally\", \"Brad\", \"Anne\")\n# Create a vector of heights\nheights &lt;- c(68, 63, 71, 72)\n# Combine them into a data frame\nclass &lt;- data.frame(names, heights)\n# Print the data frame to the screen\nclass\n\n  names heights\n1  John      68\n2 Sally      63\n3  Brad      71\n4  Anne      72\n\n\n👆Here’s what we did above:\n\nWe created a data frame with the data.frame() function.\n\nThe first argument we passed to the data.frame() function was a vector of names that we previously created.\nThe second argument we passed to the data.frame() function was a vector of heights that we previously created.\n\nWe assigned that data frame to the word class using the &lt;- function.\n\nR now recognizes class as an object that we can do things with.\nR programmers may refer to this class object as “the class object” or “the class data frame”. For our purposes, these all mean the same thing. We could also call it a data set, but that term isn’t used much in R circles.\n\nWe printed the contents of the class object to the screen by typing the word “class”.\n\nR returns (shows us) the data frame on the computer screen.\n\n\nTry copying and pasting the code above into the RStudio console on your computer. You should notice the class data frame appear in your global environment. You may also notice that the global environment pane gives you some additional information about this data frame to the right of its name. Specifically, you should see 4 obs. of 2 variables. This is R telling us that class has four rows or observations (4 obs.) and two columns or variables (2 variables). If you click the little blue arrow to the left of the data frame’s name, you will see information about the individual vectors that make up the data frame.\nAs a shortcut, instead of creating individual vectors and then combining them into a data frame as we’ve done above, most R programmers will create the vectors (columns) directly inside of the data frame function like this:\n\n# Create the class data frame\nclass &lt;- data.frame(\n  names   = c(\"John\", \"Sally\", \"Brad\", \"Anne\"),\n  heights = c(68, 63, 71, 72)\n) # Closing parenthesis down here.\n\n# Print the data frame to the screen\nclass\n\n  names heights\n1  John      68\n2 Sally      63\n3  Brad      71\n4  Anne      72\n\n\nAs you can see, both methods produce the exact same result. The second method, however, requires a little less typing and results in fewer objects cluttering up your global environment. What I mean by that is that the names and heights vectors won’t exist independently in your global environment. Rather, they will only exist as columns of the class data frame.\nYou may have also noticed that when we created the names and heights vectors (columns) directly inside of the data.frame() function we used the equal sign (=) to assign values instead of the assignment arrow (&lt;-). This is just one of those quirky R exceptions we talked about in the chapter on speaking R’s language. In fact, = and &lt;- can be used interchangeably in R. It is only by convention that we usually use &lt;- for assigning values, but use = for assigning values to columns in data frames. I don’t know why this is the convention. If it were up to me, we wouldn’t do this. We would just pick = or &lt;- and use it in all cases where we want to assign values. But, it isn’t up to me and I gave up on trying to fight it a long time ago. Your R programming life will be easier if you just learn to assign values this way – even if it’s dumb. 🤷\n\n⚠️Warning: By definition, all columns in a data frame must have the same length (i.e., number of rows). That means that each vector you create when building your data frame must have the same number of values in it. For example, the class data frame above has four names and four heights. If we had only entered three heights, we would have gotten the following error: Error in data.frame(names = c(\"John\", \"Sally\", \"Brad\", \"Anne\"), heights = c(68,  : arguments imply differing number of rows: 4, 3"
  },
  {
    "objectID": "chapters/rmd_documents.html#tibbles",
    "href": "chapters/rmd_documents.html#tibbles",
    "title": "8  Rmd Documents",
    "section": "8.5 Tibbles",
    "text": "8.5 Tibbles\nTibbles are a data structure that come from another tidyverse package – the tibble package. Tibbles are data frames and serve the same purpose in R that data frames serve; however, they are enhanced in several ways. 💪 You are welcome to look over the tibble documentation or the tibbles chapter in R for Data Science if you are interested in learning about all the differences between tibbles and data frames. For our purposes, there are really only a couple things I want you to know about tibbles right now.\nFirst, tibbles are a part of the tibble package – NOT base R. Therefore, we have to install and load either the tibble package or the dplyr package (which loads the tibble package for us behind the scenes) before we can create tibbles. I typically just load the dplyr package.\n\n# Install the dplyr package. YOU ONLY NEED TO DO THIS ONE TIME.\ninstall.packages(\"dplyr\")\n\n\n# Load the dplyr package. YOU NEED TO DO THIS EVERY TIME YOU START A NEW R SESSION.\nlibrary(dplyr)\n\nSecond, we can create tibbles using one of three functions: as_tibble(), tibble(), or tribble(). I’ll show you some examples shortly.\nThird, try not to be confused by the terminology. Remember, tibbles are data frames. They are just enhanced data frames.\n\n8.5.1 The as_tibble function\nWe use the as_tibble() function to turn an already existing basic data frame into a tibble. For example:\n\n# Create a data frame\nmy_df &lt;- data.frame(\n  name = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"),\n  age  = c(24, 44, 26, 25)\n)\n\n# Print my_df to the screen\nmy_df\n\n    name age\n1   john  24\n2 alexis  44\n3  Steph  26\n4 Quiera  25\n\n\n\n# View the class of my_df\nclass(my_df)\n\n[1] \"data.frame\"\n\n\n👆Here’s what we did above:\n\nWe used the data.frame() function to create a new data frame called my_df.\nWe used the class() function to view my_df’s class (i.e., what kind of object it is).\n\nThe result returned by the class() function tells us that my_df is a data frame.\n\n\n\n# Use as_tibble() to turn my_df into a tibble\nmy_df &lt;- as_tibble(my_df)\n\n# Print my_df to the screen\nmy_df\n\n# A tibble: 4 × 2\n  name     age\n  &lt;chr&gt;  &lt;dbl&gt;\n1 john      24\n2 alexis    44\n3 Steph     26\n4 Quiera    25\n\n\n\n# View the class of my_df\nclass(my_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n👆Here’s what we did above:\n\nWe used the as_tibble() function to turn my_df into a tibble.\nWe used the class() function to view my_df’s class (i.e., what kind of object it is).\n\nThe result returned by the class() function tells us that my_df is still a data frame, but it is also a tibble. That’s what “tbl_df” and “tbl” mean.\n\n\n\n\n8.5.2 The tibble function\nWe can use the tibble() function in place of the data.frame() function when we want to create a tibble from scratch. For example:\n\n# Create a data frame\nmy_df &lt;- tibble(\n  name = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"),\n  age  = c(24, 44, 26, 25)\n)\n\n# Print my_df to the screen\nmy_df\n\n# A tibble: 4 × 2\n  name     age\n  &lt;chr&gt;  &lt;dbl&gt;\n1 john      24\n2 alexis    44\n3 Steph     26\n4 Quiera    25\n\n\n\n# View the class of my_df\nclass(my_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n👆Here’s what we did above:\n\nWe used the tibble() function to create a new tibble called my_df.\nWe used the class() function to view my_df’s class (i.e., what kind of object it is).\n\nThe result returned by the class() function tells us that my_df is still a data frame, but it is also a tibble. That’s what “tbl_df” and “tbl” mean.\n\n\n\n\n8.5.3 The tribble function\nAlternatively, we can use the tribble() function in place of the data.frame() function when we want to create a tibble from scratch. For example:\n\n# Create a data frame\nmy_df &lt;- tribble(\n  ~name,    ~age,\n  \"john\",   24, \n  \"alexis\", 44, \n  \"Steph\",  26,\n  \"Quiera\", 25\n)\n\n# Print my_df to the screen\nmy_df\n\n# A tibble: 4 × 2\n  name     age\n  &lt;chr&gt;  &lt;dbl&gt;\n1 john      24\n2 alexis    44\n3 Steph     26\n4 Quiera    25\n\n\n\n# View the class of my_df\nclass(my_df)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n👆Here’s what we did above:\n\nWe used the tribble() function to create a new tibble called my_df.\nWe used the class() function to view my_df’s class (i.e., what kind of object it is).\n\nThe result returned by the class() function tells us that my_df is still a data frame, but it is also a tibble. That’s what “tbl_df” and “tbl” mean.\n\nThere is absolutely no difference between the tibble we created above with the tibble() function and the tibble we created above with the tribble() function. The only difference between the two functions is the syntax we used to pass the column names and data values to each function.\n\nWhen we use the tibble() function, we pass the data values to the function horizontally as vectors. This is the same syntax that the data.frame() function expects us to use.\nWhen we use the tribble() function, we pass the data values to the function vertically instead. The only reason this function exists is because it can sometimes be more convenient to type in our data values this way. That’s it.\nRemember to type a tilde (“~”) in front of your column names when using the tribble() function. For example, type ~name instead of name. That’s how R knows you’re giving it a column name instead of a data value.\n\n\n\n\n8.5.4 Why use tibbles\nAt this point, some students wonder, “If tibbles are just data frames, why use them? Why not just use the data.frame() function?” That’s a fair question. As I have said multiple times already, tibbles are enhanced. However, I don’t believe that going into detail about those enhancements is going to be useful to most of you at this point – and may even be confusing. But, I will show you one quick example that’s pretty self-explanatory.\nLet’s say that we are given some data that contains four people’s age in years. We want to create a data frame from that data. However, let’s say that we also want a column in our new data frame that contains those same ages in months. Well, we could do the math ourselves. We could just multiply each age in years by 12 (for the sake of simplicity, assume that everyone’s age in years is gathered on their birthday). But, we’d rather have R do the math for us. We can do so by asking R to multiply each value of the the column called age_years by 12. Take a look:\n\n# Create a data frame using the data.frame() function\nmy_df &lt;- data.frame(\n  name       = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"),\n  age_years  = c(24, 44, 26, 25),\n  age_months = age_years * 12\n)\n\nError in data.frame(name = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"), age_years = c(24, : object 'age_years' not found\n\n\nUh, oh! We got an error! This error says that the column age_years can’t be found. How can that be? We are clearly passing the column name age_years to the data.frame() function in the code chunk above. Unfortunately, the data.frame() function doesn’t allow us to create and refer to a column name in the same function call. So, we would need to break this task up into two steps if we wanted to use the data.frame() function. Here’s one way we could do this:\n\n# Create a data frame using the data.frame() function\nmy_df &lt;- data.frame(\n  name       = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"),\n  age_years  = c(24, 44, 26, 25)\n)\n\n# Add the age in months column to my_df\nmy_df &lt;- my_df %&gt;% mutate(age_months = age_years * 12)\n\n# Print my_df to the screen\nmy_df\n\n    name age_years age_months\n1   john        24        288\n2 alexis        44        528\n3  Steph        26        312\n4 Quiera        25        300\n\n\nAlternatively, we can use the tibble() function to get the result we want in just one step like so:\n\n# Create a data frame using the tibble() function\nmy_df &lt;- tibble(\n  name       = c(\"john\", \"alexis\", \"Steph\", \"Quiera\"),\n  age_years  = c(24, 44, 26, 25),\n  age_months = age_years * 12\n)\n\n# Print my_df to the screen\nmy_df\n\n# A tibble: 4 × 3\n  name   age_years age_months\n  &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 john          24        288\n2 alexis        44        528\n3 Steph         26        312\n4 Quiera        25        300\n\n\nIn summary, tibbles are data frames. For the most part, we will use the terms “tibble” and “data frame” interchangeably for the rest of the book. However, remember that tibbles are enhanced data frames. Therefore, there are some things that we will do with tibbles that we can’t do with basic data frames."
  },
  {
    "objectID": "chapters/rmd_documents.html#missing-data",
    "href": "chapters/rmd_documents.html#missing-data",
    "title": "8  Rmd Documents",
    "section": "8.6 Missing data",
    "text": "8.6 Missing data\nAs indicated in the warning box at the end of the data frames section of this chapter, all columns in our data frames have to have the same length. So what do we do when we are truly missing information in some of our observations? For example, how do we create the class data frame if we are missing Anne’s height for some reason?\nIn R, we represent missing data with an NA. For example:\n\n# Create the class data frame\ndata.frame(\n  names   = c(\"John\", \"Sally\", \"Brad\", \"Anne\"),\n  heights = c(68, 63, 71, NA) # Now we are missing Anne's height\n)\n\n  names heights\n1  John      68\n2 Sally      63\n3  Brad      71\n4  Anne      NA\n\n\n\n⚠️Warning: Make sure you capitalize NA and don’t use any spaces or quotation marks. Also, make sure you use NA instead of writing \"Missing\" or something like that.\n\nBy default, R considers NA to be a logical-type value (as opposed to character or numeric). for example:\n\ntypeof(NA)\n\n[1] \"logical\"\n\n\nHowever, you can tell R to make NA a different type by using one of the more specific forms of NA. For example:\n\ntypeof(NA_character_)\n\n[1] \"character\"\n\n\n\ntypeof(NA_integer_)\n\n[1] \"integer\"\n\n\n\ntypeof(NA_real_)\n\n[1] \"double\"\n\n\nMost of the time, you won’t have to worry about doing this because R will take care of converting NA for you. What do I mean by that? Well, remember that every vector can have only one type. So, when you add an NA (logical by default) to a vector with double values as we did above (i.e., c(68, 63, 71, NA)), that would cause you to have three double values and one logical value in the same vector, which is not allowed. Therefore, R will automatically convert the NA to NA_real_ for you behind the scenes.\nThis is a concept known as “type coercion” and you can read more about it here if you are interested. As I said, most of the time you don’t have to worry about type coercion – it will happen automatically. But, sometimes it doesn’t and it will cause R to give you an error. I mostly encounter this when using the if_else() and case_when() functions, which we will discuss later."
  },
  {
    "objectID": "chapters/rmd_documents.html#our-first-analysis",
    "href": "chapters/rmd_documents.html#our-first-analysis",
    "title": "8  Rmd Documents",
    "section": "8.7 Our first analysis",
    "text": "8.7 Our first analysis\nCongratulations on your new R programming skills. 🎉 You can now create vectors and data frames. This is no small thing. Basically, everything else we do in this book will start with vectors and data frames.\nHaving said that, just creating data frames may not seem super exciting. So, let’s round out this chapter with a basic descriptive analysis of the data we simulated. Specifically, let’s find the average height of the class.\nYou will find that in R there are almost always many different ways to accomplish a given task. Sometimes, choosing one over another is simply a matter of preference. Other times, one method is clearly more efficient and/or accurate than another. This is a point that will come up over and over in this book. Let’s use our desire to find the mean height of the class as an example.\n\n8.7.1 Manual calculation of the mean\nFor starters, we can add up all the heights and divide by the total number of heights to find the mean.\n\n(68 + 63 + 71 + 72) / 4\n\n[1] 68.5\n\n\n👆Here’s what we did above:\n\nWe used the addition operator (+) to add up all the heights.\nWe used the division operator (/) to divide the sum of all the heights by 4 - the number of individual heights we added together.\nWe used parentheses to enforce the correct order of operations (i.e., make R do addition before division).\n\nThis works, but why might it not be the best approach? Well, for starters, manually typing in the heights is error prone. We can easily accidently press the wrong key. Luckily, we already have the heights stored as a column in the class data frame. We can access or refer to a single column in a data frame using the dollar sign notation.\n\n\n8.7.2 Dollar sign notation\n\nclass$heights\n\n[1] 68 63 71 72\n\n\n👆Here’s what we did above:\n\nWe used the dollar sign notation to access the heights column in the class data frame.\n\nDollar sign notation is just the data frame name, followed by the dollar sign, followed by the column name.\n\n\n\n\n8.7.3 Bracket notation\nFurther, we can use bracket notation to access each value in a vector. I think it’s easier to demonstrate bracket notation than it is to describe it. For example, we could access the third value in the names vector like this:\n\n# Create the heights vector\nheights &lt;- c(68, 63, 71, 72)\n\n# Bracket notation\n# Access the third element in the heights vector with bracket notation\nheights[3]\n\n[1] 71\n\n\nRemember, that data frame columns are also vectors. So, we can combine the dollar sign notation and bracket notation, to access each individual value of the height column in the class data frame. This will help us get around the problem of typing each individual height value. For example:\n\n# First way to calculate the mean\n# (68 + 63 + 71 + 72) / 4\n\n# Second way. Use dollar sign notation and bracket notation so that we don't \n# have to type individual heights\n(class$heights[1] + class$heights[2] + class$heights[3] + class$heights[4]) / 4\n\n[1] 68.5\n\n\n\n\n8.7.4 The sum function\nThe second method is better in the sense that we no longer have to worry about mistyping the heights. However, who wants to type class$heights[...] over and over? What if we had a hundred numbers? What if we had a thousand numbers? This wouldn’t work. Luckily, there is a function that adds all the numbers contained in a numeric vector – the sum() function. Let’s take a look:\n\n# Create the heights vector\nheights &lt;- c(68, 63, 71, 72)\n\n# Add together all the individual heights with the sum function\nsum(heights)\n\n[1] 274\n\n\nRemember, that data frame columns are also vectors. So, we can combine the dollar sign notation and sum() function, to add up all the individual heights in the heights column of the class data frame. It looks like this:\n\n# First way to calculate the mean\n# (68 + 63 + 71 + 72) / 4\n\n# Second way. Use dollar sign notation and bracket notation so that we don't \n# have to type individual heights\n# (class$heights[1] + class$heights[2] + class$heights[3] + class$heights[4]) / 4\n\n# Third way. Use dollar sign notation and sum function so that we don't have \n# to type as much\nsum(class$heights) / 4\n\n[1] 68.5\n\n\n👆Here’s what we did above:\n\nWe passed the numeric vector heights from the class data frame to the sum() function using dollar sign notation.\nThe sum() function returned the total value of all the heights added together.\nWe divided the total value of the heights by four – the number of individual heights.\n\n\n\n8.7.5 Nesting functions\n!! Before we move on, I want to point out something that is actually kind of a big deal. In the third method above, we didn’t manually add up all the individual heights - R did this calculation for us. Further, we didn’t store the sum of the individual heights somewhere and then divide that stored value by 4. Heck, we didn’t even see what the sum of the individual heights were. Instead, the returned value from the sum function (274) was used directly in the next calculation (/ 4) by R without us seeing the result. In other words, (68 + 63 + 71 + 72) / 4, 274 / 4, and sum(class$heights) / 4 are all exactly the same thing to R. However, the third method (sum(class$heights) / 4) is much more scalable (i.e., adding a lot more numbers doesn’t make this any harder to do) and much less error prone. Just to be clear, the BIG DEAL is that we now know that the values returned by functions can be directly passed to other functions in exactly the same way as if we typed the values ourselves.\nThis concept, functions passing values to other functions is known as nesting functions. It’s called nesting functions because we can put functions inside of other functions.\n“But, Brad, there’s only one function in the command sum(class$heights) / 4 – the sum() function.” Really? Is there? Remember when I said that operators are also functions in R? Well, the division operator is a function. And, like all functions it can be written with parentheses like this:\n\n# Writing the division operator as a function with parentheses\n`/`(8, 4)\n\n[1] 2\n\n\n👆Here’s what we did above:\n\nWe wrote the division operator in its more function-looking form.\n\nBecause the division operator isn’t a letter, we had to wrap it in backticks (`).\nThe backtick key is on the top left corner of your keyboard near the escape key (esc).\nThe first argument we passed to the division function was the dividend (The number we want to divide).\nThe second argument we passed to the division function was the divisor (The number we want to divide by).\n\n\nSo, the following two commands mean exactly the same thing to R:\n\n8 / 4\n\n\n`/`(8, 4)\n\nAnd if we use this second form of the division operator, we can clearly see that one function is nested inside another function.\n\n`/`(sum(class$heights), 4)\n\n[1] 68.5\n\n\n👆Here’s what we did above:\n\nWe calculated the mean height of the class.\n\nThe first argument we passed to the division function was the returned value from the sum() function.\nThe second argument we passed to the division function was the divisor (4).\n\n\nThis is kind of mind-blowing stuff the first time you encounter it. 🤯 I wouldn’t blame you if you are feeling overwhelmed or confused. The main points to take away from this section are:\n\nEverything we do in R, we will do with functions. Even operators are functions, and they can be written in a form that looks function-like; however, we will almost never actually write them in that way.\nFunctions can be nested. This is huge because it allows us to directly pass returned values to other functions. Nesting functions in this way allows us to do very complex operations in a scalable way and without storing a bunch of unneeded values that are created in the intermediate steps of the operation.\nThe downside of nesting functions is that it can make our code difficult to read - especially when we nest many functions. Fortunately, we will learn to use the pipe operator (%&gt;%) in the workflow basics part of this book. Once you get used to pipes, they will make nested functions much easier to read.\n\nNow, let’s get back to our analysis…\n\n\n8.7.6 The length function\nI think most of us would agree that the third method we learned for calculating the mean height is preferable to the first two methods for most situations. However, the third method still requires us to know how many individual heights are in the heights column (i.e., 4). Luckily, there is a function that tells us how many individual values are contained in a vector – the length() function. Let’s take a look:\n\n# Create the heights vector\nheights &lt;- c(68, 63, 71, 72)\n\n# Return the number of individual values in heights\nlength(heights)\n\n[1] 4\n\n\nRemember, that data frame columns are also vectors. So, we can combine the dollar sign notation and length() function to automatically calculate the number of values in the heights column of the class data frame. It looks like this:\n\n# First way to calculate the mean\n# (68 + 63 + 71 + 72) / 4\n\n# Second way. Use dollar sign notation and bracket notation so that we don't \n# have to type individual heights\n# (class$heights[1] + class$heights[2] + class$heights[3] + class$heights[4]) / 4\n\n# Third way. Use dollar sign notation and sum function so that we don't have \n# to type as much\n# sum(class$heights) / 4\n\n# Fourth way. Use dollar sign notation with the sum function and the length \n# function\nsum(class$heights) / length(class$heights)\n\n[1] 68.5\n\n\n👆Here’s what we did above:\n\nWe passed the numeric vector heights from the class data frame to the sum() function using dollar sign notation.\nThe sum() function returned the total value of all the heights added together.\nWe passed the numeric vector heights from the class data frame to the length() function using dollar sign notation.\nThe length() function returned the total number of values in the heights column.\nWe divided the total value of the heights by the total number of values in the heights column.\n\n\n\n8.7.7 The mean function\nThe fourth method above is definitely the best method yet. However, this need to find the mean value of a numeric vector is so common that someone had the sense to create a function that takes care of all the above steps for us – the mean() function. And as you probably saw coming, we can use the mean function like so:\n\n# First way to calculate the mean\n# (68 + 63 + 71 + 72) / 4\n\n# Second way. Use dollar sign notation and bracket notation so that we don't \n# have to type individual heights\n# (class$heights[1] + class$heights[2] + class$heights[3] + class$heights[4]) / 4\n\n# Third way. Use dollar sign notation and sum function so that we don't have \n# to type as much\n# sum(class$heights) / 4\n\n# Fourth way. Use dollar sign notation with the sum function and the length \n# function\n# sum(class$heights) / length(class$heights)\n\n# Fifth way. Use dollar sign notation with the mean function\nmean(class$heights)\n\n[1] 68.5\n\n\nCongratulations again! You completed your first analysis using R!"
  },
  {
    "objectID": "chapters/rmd_documents.html#some-common-errors",
    "href": "chapters/rmd_documents.html#some-common-errors",
    "title": "8  Rmd Documents",
    "section": "8.8 Some common errors",
    "text": "8.8 Some common errors\nBefore we move on, I want to briefly discuss a couple common errors that will frustrate many of you early in your R journey. You may have noticed that I went out of my way to differentiate between the heights vector and the heights column in the class data frame. As annoying as that may have been, I did it for a reason. The heights vector and the heights column in the class data frame are two separate things to the R interpreter, and you have to be very specific about which one you are referring to. To make this more concrete, let’s add a weight column to our class data frame.\n\nclass$weight &lt;- c(160, 170, 180, 190)\n\n👆Here’s what we did above:\n\nWe created a new column in our data frame – weight – using dollar sign notation.\n\nNow, let’s find the mean weight of the students in our class.\n\nmean(weight)\n\nError in mean(weight): object 'weight' not found\n\n\nUh, oh! What happened? Why is R saying that weight doesn’t exist? We clearly created it above, right? Wrong. We didn’t create an object called weight in the code chunk above. We created a column called weight in the object called class in the code chunk above. Those are different things to R. If we want to get the mean of weight we have to tell R that weight is a column in class like so:\n\nmean(class$weight)\n\n[1] 175\n\n\nA related issue can arise when you have an object and a column with the same name but different values. For example:\n\n# An object called scores\nscores &lt;- c(5, 9, 3)\n\n# A colummn in the class data frame called scores\nclass$scores &lt;- c(95, 97, 93, 100)\n\nIf you ask R for the mean of scores, R will give you an answer.\n\nmean(scores)\n\n[1] 5.666667\n\n\nHowever, if you wanted the mean of the scores column in the class data frame, this won’t be the correct answer. Hopefully, you already know how to get the correct answer, which is:\n\nmean(class$scores)\n\n[1] 96.25\n\n\nAgain, the scores object and the scores column of the class object are different things to R."
  },
  {
    "objectID": "chapters/rmd_documents.html#summary",
    "href": "chapters/rmd_documents.html#summary",
    "title": "8  Rmd Documents",
    "section": "8.9 Summary",
    "text": "8.9 Summary\nWow! We covered a lot in this first part of the book on getting started with R and RStudio. Don’t feel bad if your head is swimming. It’s a lot to take-in. However, you should feel proud of the fact that you can already do some legitimately useful things with R. Namely, simulate and analyze data. In the next part of this book, we are going to discuss some tools and best practices that will make it easier and more efficient for you to write and share your R code. After that, we will move on to tackling more advanced programming and data analysis challenges."
  },
  {
    "objectID": "chapters/tables.html#test-table",
    "href": "chapters/tables.html#test-table",
    "title": "9  Tables",
    "section": "9.1 Test table",
    "text": "9.1 Test table\nJust quickly testing to see if it will download. Need to better document this in the future.\n\nkey &lt;- tribble(\n ~var, ~description,\n \"ml_age\", \"Participant's age at baseline.\",\n \"ml_gender_f\", \"Participant's self-reported sex at baseline.\",\n \"ml_race_f\", \"Participant's self-reported race at baseline.\",\n \"ml_race_eth_4cat_f\", \"Participant's self-reported race at baseline. Collapsed into four categories.\",\n \"ml_hispanic_f\", \"Participant's self-report of Hispanic ethnicity at baseline.\"\n)\n\nInitially, the code chunk above created a datatable version of the table.\n```{r}\nDT::datatable(\n  key,\n  colnames = c(\"Variable Name\", \"Variable Description\")\n)\n```\nWhen I tried to render the book, I got the following error:\nError: Functions that produce HTML output found in document targeting pdf output.\nPlease change the output type of this document to HTML. Alternatively, you can allow\nHTML output in non-HTML formats by adding this option to the YAML front-matter of\nyour quarto file:\n\n  prefer-html: true\n\nNote however that the HTML output will not be visible in non-HTML formats.\n\nExecution halted\n\nknitr::kable(key)\n\n\n\n\n\n\n\n\nvar\ndescription\n\n\n\n\nml_age\nParticipant’s age at baseline.\n\n\nml_gender_f\nParticipant’s self-reported sex at baseline.\n\n\nml_race_f\nParticipant’s self-reported race at baseline.\n\n\nml_race_eth_4cat_f\nParticipant’s self-reported race at baseline. Collapsed into four categories.\n\n\nml_hispanic_f\nParticipant’s self-report of Hispanic ethnicity at baseline."
  },
  {
    "objectID": "chapters/tables.html#issues",
    "href": "chapters/tables.html#issues",
    "title": "9  Tables",
    "section": "9.2 Issues",
    "text": "9.2 Issues\n\nWhy do I get ?@tbl-demographics-overall and how do I fix it?\n\nThere may be other reasons why this error can occur, but I was getting it because Quarto doesn’t currently support table captions for datatables. You can, however, use figure captions for datatables."
  },
  {
    "objectID": "chapters/code_chunks.html#code-run-time",
    "href": "chapters/code_chunks.html#code-run-time",
    "title": "10  Code chunks",
    "section": "10.1 Code Run Time",
    "text": "10.1 Code Run Time\nWe were interested in understanding how much caching code chunks could potentially speed up the rendering process for books. Initially, the code to test out caching code chunks was part of the test_quarto_book project. However, it seemed like the quarto_render() function works differently in the context of a book project and was making testing difficult. Specifically, quarto::quarto_render(\"slow_code_default.qmd\") seemed to render the entire book instead of just the slow_code_default.qmd document. Therefore, we created a separate Quarto project to run these tests – test_quarto_cached_chunks.\nThe bottom line is that caching actually causes the render to take longer to process on the first run. However, it appears to speed up subsequent renders. This makes sense."
  },
  {
    "objectID": "chapters/code_chunks.html#naming-code-chunks",
    "href": "chapters/code_chunks.html#naming-code-chunks",
    "title": "10  Code chunks",
    "section": "10.2 Naming code chunks",
    "text": "10.2 Naming code chunks\nUse the label code chunk option. For example, #| label: slow-code-cached"
  },
  {
    "objectID": "chapters/code_chunks.html#showing-entire-code-chunks",
    "href": "chapters/code_chunks.html#showing-entire-code-chunks",
    "title": "10  Code chunks",
    "section": "10.3 Showing entire code chunks",
    "text": "10.3 Showing entire code chunks\nWhen you want to display and entire code chunk in the rendered output, as opposed to executing the code chunk, surround it with four backticks.\nAlso, make sure to use double curly braces {{}} around the language name identifier. If you don’t, funky looking code will be output.\n````\n```{r}\n#| A code chunk for display\n#| eval:false\n1 + 1\n```\n````"
  },
  {
    "objectID": "chapters/parameterizing.html",
    "href": "chapters/parameterizing.html",
    "title": "11  Parameterizing",
    "section": "",
    "text": "Notes on parameterizing Quarto documents.\nUseful websites:\n\nRender parameterized reports with Quarto\n\nWe add parameters to the yaml header of the Quarto file. For example, this file has the following yaml header:\n---\nparams:\n  test_param: \"Hello World!\"\n---\nWe can then use that parameter in our markdown like this.\nMy test parameter says, \"`r params$test_param`\"\nAnd here is what is rendered: My test parameter says, “r params$test_param”.\nCurrently, this doesn’ appear to work. However, it did work for the L2C mater table. I’m not sure why. Right now, all I can come up with is that it is some difference between a Quarto book and a Quarto website. Try to figure this out later."
  },
  {
    "objectID": "chapters/source_qmd_files.html",
    "href": "chapters/source_qmd_files.html",
    "title": "12  Sourcing qmd files",
    "section": "",
    "text": "We can “source” or programmatically render (as opposed to interactively rendering with the Render button) qmd files – including inside of code chunks in other qmd files. Here is an example code chunk.\n\nquarto::quarto_render(\"slow_code_cached.qmd\", quiet = TRUE)"
  },
  {
    "objectID": "chapters/pdf.html",
    "href": "chapters/pdf.html",
    "title": "13  PDF",
    "section": "",
    "text": "Notes on exporting the book to pdf.\nNot only how to render it to pdf, but is there an option\nAccording to this, it looks like we can make a pdf downloadable by adding downloads: [pdf, epub] to _quarto.yml. In the config file for this test book, we added downloads: pdf to the book options section.\nImportant: It looks like the option above only creates the link on the HTML page to download the pdf version of the book. However, a new pdf version of the book isn’t automatically rendered when we click the render button. You have to specifically render a pdf version separately from an html version.\nWe may want to think about creating an internal file with notes and a chunk that renders html and pdf when executed.\n```{bash}\n#| eval: false\nquarto render\n```\nEven easier, you can do this with a native R code chunk.\n\nThe input argument: The input file or project directory to be rendered (defaults to rendering the project in the current working directory).\nThe output_format argument: Target output format (defaults to “html”). The option “all” will render all formats defined within the file or project.\n\n```{r}\n#| Render with R\n#| eval: false\nquarto::quarto_render(output_format = \"all\")\n```"
  },
  {
    "objectID": "chapters/slide_presentations.html#revealjs-presentations",
    "href": "chapters/slide_presentations.html#revealjs-presentations",
    "title": "14  Slide presentations",
    "section": "14.1 Revealjs presentations",
    "text": "14.1 Revealjs presentations\n\n14.1.1 Useful links\n\nOfficial publishing Revealjs documentation\nOfficial publishing HTML basics documentation\n\n\n\n14.1.2 Create the project\n\nStart by creating a GitHub repo.\nCreate a gh-pages branch in GitHub.\nSet the repositories source branch to gh-pages. https://quarto.org/docs/publishing/github-pages.html#source-branch\n\nSettings &gt; Pages &gt; Deploy from branch & select gh-pages as the branch.\n\nClone the repo to your computer.\n\nOpen a new RStudio session.\nCreate a new project in an existing directory. Use the cloned directory.\nIn the project, create a new file titled _quarto.yml with the following content.\n\nproject:\n  title: \"Project Name\"\n\nCreate a new Quarto file named index.qmd. Update the yml header to look something like the following.\n\n---\ntitle: \"Name on Title Slide\"\nsubtitle: \"Optional Subtitle\"\ndate: \"July 26, 2023\"\nformat: \n  revealjs:\n    css: style.css\n    preview-links: false\nlogo: uthealth_sph_logo.png\n---\n\nNotice that you can optionally add a CSS file as well.\n\n\n\n14.1.3 Adding interactive quizzes/polls\nSo far, embedding Poll Everywhere activities seems to be the best choice.\n\nHere is a link to a blog post about embedding activities.\nHere is a link to a test presentation with embedded activities\n\n\n\n14.1.4 What I did to publish the DSHS presentation\n\n2023-07-26: I created these notes while trying to publish the presentation I did for Texas DSHS.\nWhen I began this process, I had already created the presentation in an R project.\nCreate a new GitHub repo (with nothing but a README file): https://github.com/brad-cannell/dshs-2023-07-26.\nCreate a gh-pages branch in GitHub.\nSet the repositories source branch to gh-pages. https://quarto.org/docs/publishing/github-pages.html#source-branch\nSettings &gt; Pages &gt; Deploy from branch & select gh-pages as the branch.\nClone the repo to your computer.\nCopy and paste all of files I had already created into the newly cloned directory.\nRename the qmd file that creates the presentation to index.qmd. The gh-pages branch will look for an html file named index.\nRender index.qmd. quarto render in terminal.\nCommit and push all of the file changes.\nIn the terminal, type quarto publish gh-pages.\nThe presentation should appear at https://brad-cannell.github.io/dshs-2023-07-26."
  },
  {
    "objectID": "chapters/publishing.html#github-repository",
    "href": "chapters/publishing.html#github-repository",
    "title": "15  Publishing",
    "section": "15.1 GitHub repository",
    "text": "15.1 GitHub repository\nThe first step to publishing a book online is to put it into a GitHub repository. Originally, I started my book project by creating a new project, clicking new directory, then Quarto book. After creating the book project, I created a repository for it in GitHub and then tried to use GitHub’s on-screen instructions to push the book files to the repo. However, I kept getting errors and wasn’t ever able to make it work. I feel like this shouldn’t be the case and was probably just some weird one-off. So, don’t give up on that process just yet.\nWhat I eventually got to work was this process.\n\nI created the repo on GitHub (with nothing but a README file) first.\nI cloned the repo to my computer.\nI clicked new project &gt; existing directory.\nThe downside is that RStudio didn’t give me the option to make it a Quarto book project.\nIn the terminal, following this guidance, I typed quarto create-project test_quarto_book --type book.\n\nMake sure the terminal is set to the project’s directory.\n\nThat added all the built-in book stuff, but in a folder inside the current folder. You can move all of the files you’re interested in over if you want. Since I already had the files I had been previously working with (but wasn’t able to push to GitHub), I moved them over and worked with them."
  },
  {
    "objectID": "chapters/publishing.html#github-pages",
    "href": "chapters/publishing.html#github-pages",
    "title": "15  Publishing",
    "section": "15.2 GitHub Pages",
    "text": "15.2 GitHub Pages\nUseful websites:\n\nhttps://quarto.org/docs/publishing/github-pages.html\n\nThat website discusses three methods for publishing the book with GitHub Pages.\n\nRender to Docs. The easiest and most straightforward. However, checking in the _book directory makes for messy diffs.\nThe publish command. Requires a little set up on the front end, but gives more control.\nGitHub Action. You might prefer this if you want execution and/or rendering to be automatically triggered from commits. However, it seems like the most complicated option.\n\nI’m going with option 2 for now."
  },
  {
    "objectID": "chapters/publishing.html#netlify",
    "href": "chapters/publishing.html#netlify",
    "title": "15  Publishing",
    "section": "15.3 Netlify",
    "text": "15.3 Netlify\nUseful websites:\n\nhttps://quarto.org/docs/publishing/netlify.html\n\nThat website discusses three methods for publishing the book with Netlify.\n\nPublish without GitHub. This might be the easiest? I guess I should try it out and see how it goes.\n\nHere is the Netlify site that was created. This seems to work. Maybe just use it until I have a reason not to?\nThe potential downside here seems to be that you have to remember to go into the terminal and type quarto publish netlify. The published version isn’t automatically updated when you push the repo to GitHub.\n\nPublish from GitHub. At first glance, this seems to be the closest to the process I was using with Bookdown.\nGitHub Action. You might prefer this if you want execution and/or rendering to be automatically triggered from commits. However, it seems like the most complicated option."
  },
  {
    "objectID": "chapters/references.html",
    "href": "chapters/references.html",
    "title": "References",
    "section": "",
    "text": "1. Knuth DE. Literate programming. Comput\nJ. 1984;27(2):97-111. doi:10.1093/comjnl/27.2.97\n\n\n2. R\nDevelopment Core Team. An Introduction to R.;\n2020.\n\n\n3. RStudio. RStudio. Published online\n2020.\n\n\n4. RStudio. R markdown. Published\nonline 2020."
  },
  {
    "objectID": "chapters/appendices/appendix_example.html",
    "href": "chapters/appendices/appendix_example.html",
    "title": "Appendix A — Example appendix",
    "section": "",
    "text": "This is just an example appendix."
  },
  {
    "objectID": "chapters/appendices/glossary.html",
    "href": "chapters/appendices/glossary.html",
    "title": "Appendix B — Glossary",
    "section": "",
    "text": "Console\n\nComing soon.\n\nData frame\n\nFor our purposes, data frames are just R’s term for data set or data table. Data frames are made up of columns (variables) and rows (observations). In R, all columns of a data frame must have the same length.\n\nFunctions\n\nComing soon.\n\n\n\nArguments: Arguments always go inside the parentheses of a function and give the function the information it needs to give us the result we want.\nPass: In programming lingo, you pass a value to a function argument. For example, in the funtion call seq(from = 2, to = 100, by = 2) we could say that we passed a value of 2 to the from argument, we passed a value of 100 to the to argument, and we passed a value of 2 to the by argument.\nReturns: Instead of saying, “the seq() function gives us a sequence of numbers…” we could say, “the seq() function returns us a sequence of numbers…” In programming lingo, functions return one or more results.\n\n\nGlobal environment\n\nComing soon.\n\nObjects\n\nComing soon.\n\nR\n\nR is an integrated suite of software facilities for data manipulation, calculation and graphical display. R is very much a vehicle for newly developing methods of interactive data analysis. It has developed rapidly and has been extended by a large collection of packages. However, most programs written in R are essentially ephemeral, written for a single piece of data analysis.1\n\nR markdown documents\n\nR markdown documents are text files that can be used to clean and analyze your data interactively as well as share your final results in many different formats (e.g., Microsoft Word, PDF, and even websites). R markdown documents weave together R code, narrative text, and multimedia content together into a polished final product.2\n\nRStudio\n\nRStudio is an integrated development environment (IDE) for R. It includes a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging and workspace management. RStudio is available in open source and commercial editions and runs on the desktop (Windows, Mac, and Linux) or in a browser connected to RStudio Server or RStudio Server Pro (Debian/Ubuntu, Red Hat/CentOS, and SUSE Linux).3\n\n\n\n\n\n\n1. R Development Core Team. An Introduction to R.; 2020.\n\n\n2. RStudio. R markdown. Published online 2020.\n\n\n3. RStudio. RStudio. Published online 2020."
  }
]